//将指针初始化为变量的地址，只是给变量起了一个别名，因为我们本来就可以直接操控变量。
//指针真正的用武之地是，在运行阶段分配为命名的内存以存储值。
#include<iostream>
using namespace std;
int main() {
	//使用new创建一个指针：
	int* pt = new int;//解释：new int告诉程序寻找一块能存储int型变量的内存并返回该内存地址给pt。
	//为什么前面还要指出指针类型是 int* ? 因为地址本身只指出了对象存储地址的开始，而指针类型告诉程序要读取多少长度。
	// 例如int*四个字节，则程序从地址开始往后读取四个字节。

	//new创建的是未命名的内存，可以用*pt直接使用：
	*pt = 2001;
	cout << "pt is " << pt << " . *pt is " << *pt << endl;

	//注意
	//int* pt2;
	//*pt2 = 2001;//这里只是给地址所存储的变量赋值，并没有给地址赋值，程序会随机找一块地址，可能会导致难以追踪的bug

	//使用delete释放内存：将new找到的内存归还到内存池，可供程序其他部分使用
	delete pt;//delete 后面加上new创建的指针
	//delete释放的是pt指向的内存，而不是pt本身。也就是说，pt不能再操控这个内存，但是可以重新指向别的内存。
	int hight = 100;
	pt = &hight;
	cout << "pt is " << pt << " . *pt is " << *pt << endl;
	//注意new 和delete 必须配对使用，否则会导致内存泄露。如果还没有释放new分配的内存，就将pt指向别的内存，那么就再也找不回原来new分配的内存
	//不能释放已经释放的内存
	//delete只能释放new创建的指针
	//不要创建两个指向同一块内存的指针，否则会导致重复释放。
	
	return 0;

}