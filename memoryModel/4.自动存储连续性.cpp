//在默认情况下，在函数中声明的函数参数和变量的存储连续性为自动，作用域为局部，没有链接性。
#include<iostream>
using namespace std;

int main() {
	int texas = 31;
	int year = 2011;
	cout << "In main() , texas = " << texas << ", &texas= " << &texas << endl;
	cout << "In main() , year = " << year << ", &year = " << &year << endl;
	{
		int texas = 32;//程序执行内部代码块的语句时，将texas解释为局部代码块变量。
		//新的定义隐藏了以前的定义，新定义可见，旧定义暂时不可见，程序离开代码块时，原来的定义重新可见
		cout << "In block , texas = " << texas << ", &texas= " << &texas << endl;
	}
	return 0;
}
//自动变量和栈：程序为自动变量留出一段内存，将其视为栈。
//程序用两个指针跟踪栈，一个指针指向栈底――栈开始的位置，一个指针指向栈顶――下一个可用内存单元
//栈是后进先出的，即最后加入到栈的变量最先被弹出。
//当函数调用时，先把实参存在栈中，再将形参的名称与实参的值关联起来。
//函数结束时，栈顶指针重新指回函数调用之前的位置，新值没有被删除，但是不再标记，它们所占据的空间将被下一个将值加入到栈中的函数所使用。